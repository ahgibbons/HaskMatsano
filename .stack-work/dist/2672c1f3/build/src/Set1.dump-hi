
==================== FINAL INTERFACE ====================
2016-06-02 10:11:08.66202 UTC

interface Matas_5owQ4W1svNRDGggvsHH52l:Set1 7103
  interface hash: f6789fec4d43cea369d414c9ac6c7077
  ABI hash: 25d8ee6530df6bd09d33a80caecce1a5
  export-list hash: 246687e4f319cf4b40a62828683c094a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ca90f50df6a523fc5f8156d8564fb914
  sig of: Nothing
  used TH splices: False
  where
exports:
  Set1.ch2_t1
  Set1.ch2_t2
  Set1.ch3_instring
  Set1.chall1
  Set1.chall1_res
  Set1.chall2
  Set1.chall2_res
  Set1.chall3
  Set1.inText
module dependencies: CryptTools
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 bitwise-0.1.1.1@bitwi_1UInExT1dkGBFQ7JfumA61
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      bytestring-read-0.3.1@bytes_E70YK5o9wd6F4IFwPKQNVW
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      types-compat-0.1.1@types_4nbjkueFGIp963bsRkjZLR
                      word8-0.1.2@word8_6yKBsGbmsbLB2UCORShr75
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics base-4.8.2.0:GHC.TypeLits
                         bytestring-read-0.3.1@bytes_E70YK5o9wd6F4IFwPKQNVW:Data.ByteString.Read.Class
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  CryptTools 0c8532d7a30789eab9d7fdff54db04c0
  exports: 8166248ba896b1ade28c63dfa1bce64f
  B64String 9ec2b83420e2a247306fc38f1f6c7bc1
  HexString c506429768d9bc3ee1cd98b8780c2bde
  hexToString c6be5855143e78bc1dd0dda205d32631
  readB16 37650592b38587495c675abfb764bf12
  showB16 9d20275bb7cbb0159d1f5a444c4f396a
  showB64String 2d84ccd2bf17ba152d7e7d517f9bc6fa
  xorCharBS 47bcfd35f27ad77ccf05dd8e26d9f8f9
import  -/  base-4.8.2.0:Data.Bits 87f514c5f0e66e224843da33c04aa38b
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString 0ddef3e8d5f0e8e432c4b23b5632df49
1f6e29e8856aa9b958fb833c96ed9e6c
  ch2_t1 :: CryptTools.HexString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "1c0111001f010100061a024b53535009181c"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
ad60740fa64f2b770638f51ae154d24f
  ch2_t2 :: CryptTools.HexString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "686974207468652062756c6c277320657965"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
d8d0decefa4c7bb0a253b698ab602380
  ch3_instring :: CryptTools.HexString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr#
                   = "1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
b9181e9bc91880910549851b24b50813
  chall1 :: CryptTools.B64String
  {- Unfolding: (CryptTools.showB64String Set1.chall4) -}
1986f3b87a1878b951a8b1c0d7af78af
  chall1_res :: CryptTools.B64String
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr#
                   = "SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
ea48939ce0cf74bcf6c682b1c41cf389
  chall2 :: CryptTools.HexString
  {- Unfolding: (CryptTools.showB16 Set1.chall5) -}
7a582178cea94899c820aa680ed09f11
  chall2_res :: CryptTools.HexString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "746865206b696420646f6e277420706c6179"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
0b46726807e3d31636e0b2e16dc4af50
  chall3 :: [Data.ByteString.Internal.ByteString]
  {- Unfolding: (Set1.chall3_go 65) -}
dce7be58e614cdb4d901d8fd73149028
  chall3_go :: GHC.Prim.Int# -> [Data.ByteString.Internal.ByteString]
  {- Arity: 1, Strictness: <L,U> -}
1d702fa6fba6abbd1ffb85f910d4ea97
  chall4 :: [GHC.Word.Word8]
  {- Unfolding: (case Set1.inText of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 letrec {
                   go :: GHC.Ptr.Ptr GHC.Word.Word8
                         -> GHC.Ptr.Ptr GHC.Word.Word8 -> [GHC.Word.Word8]
                     {- Arity: 2 -}
                   = \ p1 :: GHC.Ptr.Ptr GHC.Word.Word8
                       q :: GHC.Ptr.Ptr GHC.Word.Word8 ->
                     case p1 of p2 { GHC.Ptr.Ptr ipv ->
                     case q of q1 { GHC.Ptr.Ptr ipv1 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.eqAddr# ipv ipv1) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 ipv
                                 0
                                 GHC.Prim.realWorld# of ds2 { (#,#) ipv2 ipv3 ->
                          case GHC.Prim.touch#
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 dt1
                                 ipv2 of s' { DEFAULT ->
                          GHC.Types.:
                            @ GHC.Word.Word8
                            (GHC.Word.W8# ipv3)
                            (go
                               (GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# ipv 1))
                               q1) } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Word.Word8 } } }
                 } in
                 go
                   (GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# dt dt2))
                   (GHC.Ptr.Ptr
                      @ GHC.Word.Word8
                      (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 dt3))) }) -}
ad73d6f6b7f205a5d374ae248eda5f33
  chall5 :: GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Integer.Type.xorInteger
                   Set1.chall7
                   Set1.chall6) -}
ad8fbc3a43e8d95705fcb111c4ee4f64
  chall6 :: GHC.Integer.Type.Integer
  {- Unfolding: (CryptTools.readB16 Set1.ch2_t2) -}
7517abac628d667553b2dc89a6fdcd37
  chall7 :: GHC.Integer.Type.Integer
  {- Unfolding: (CryptTools.readB16 Set1.ch2_t1) -}
e80a14bdbfaeefdda40d730383267746
  inText :: CryptTools.HexString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr#
                   = "49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

